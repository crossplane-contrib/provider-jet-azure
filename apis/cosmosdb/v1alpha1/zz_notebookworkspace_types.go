/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NotebookWorkspaceObservation struct {
	ServerEndpoint *string `json:"serverEndpoint,omitempty" tf:"server_endpoint,omitempty"`
}

type NotebookWorkspaceParameters struct {

	// +crossplane:generate:reference:type=Account
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-tf-azure/apis/rconfig.ExtractResourceName()
	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Optional
	AccountNameRef *v1.Reference `json:"accountNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AccountNameSelector *v1.Selector `json:"accountNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tf-azure/apis/resource/v1alpha1.ResourceGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-tf-azure/apis/rconfig.ExtractResourceName()
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

// NotebookWorkspaceSpec defines the desired state of NotebookWorkspace
type NotebookWorkspaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NotebookWorkspaceParameters `json:"forProvider"`
}

// NotebookWorkspaceStatus defines the observed state of NotebookWorkspace.
type NotebookWorkspaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotebookWorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NotebookWorkspace is the Schema for the NotebookWorkspaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfazure}
type NotebookWorkspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotebookWorkspaceSpec   `json:"spec"`
	Status            NotebookWorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotebookWorkspaceList contains a list of NotebookWorkspaces
type NotebookWorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotebookWorkspace `json:"items"`
}

// Repository type metadata.
var (
	NotebookWorkspaceKind             = "NotebookWorkspace"
	NotebookWorkspaceGroupKind        = schema.GroupKind{Group: Group, Kind: NotebookWorkspaceKind}.String()
	NotebookWorkspaceKindAPIVersion   = NotebookWorkspaceKind + "." + GroupVersion.String()
	NotebookWorkspaceGroupVersionKind = GroupVersion.WithKind(NotebookWorkspaceKind)
)

func init() {
	SchemeBuilder.Register(&NotebookWorkspace{}, &NotebookWorkspaceList{})
}
